    Working plan

- 1. Decode torrent file to get tracker ip
    torrent struct
        attributes:
            []SHA-1 hashes for each piece
            bitarray, each bit tells whether i have the corresponding piece of the torrent
            
- 2. Send get request to tracker to get peer information 

- 3. Receive response from tracker which has ip addresses of peers

4. Send Handshake messages to each peer  //https://wiki.theory.org/BitTorrentSpecification#Handshake
    receive handshake messages from peers (check peer-id from tracker (if there is one) with the one received - if different then close connection)
    
5. Peers send many Have requests, one for each piece each one has, or a bitfield
    - peer struct - to store info for each peer i am connected to; 
        attrbutes: 
            bitarray for available parts
            ip addr
            port
            ...
            
6. Send peers Interested messages in order to receive anything and wait for Unchoke message

7. One piece is too big => divide it into blocks (sizeof(block) == 2^14 == 16384 bytes)

8. Send Request messages
    4 byte message length
    1 byte message id
    payload:
    4 byte piece index (0 based)
    4 byte block offset within the piece (in bytes)
    4 byte block length (2^14)
    
9. Peers respond with Piece messages (each one contains information about a block!)
    4 byte length prefix
    1 byte message id
    payload:
    4 byte piece index
    4 byte block offset within the piece (in bytes)
    variable length block with raw bytes of the requested block (length == requested length)
    
10. Store blocks in memory until having a whole piece

11. Hash check the piece   
    11.a. if okay -> write piece to memory
    11.b. if !okay -> ask pieces again

notes:
    1. Single file - pieces will be downloaded in the following order:
        0 -> 10 -> 20 -> ... -> 1 -> 11 -> 21 -> ...
        create file in the beginning of the downloading with the needed size and writing each piece where it is supposed to be
    2. Multiple files - download file by file, for each one using the above algorithm